% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/07_stack.R
\name{tb_stack}
\alias{tb_stack}
\title{pivot table to longer}
\description{
The `.stack` parameter of `[.tb` is used to pivot to longer, an action that
is often accomplished by using `tidyr::pivot_longer()`, `tidyr::gather()`,
`data.table::melt()`,  `reshape2::melt()`, `reshape::melt()`,
`stats::reshape()` (with `direction = "long"`),
or `utils::stack()`. The syntax we propose is generally more flexible and
more compact than current solutions.
}
\examples{
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## examples from ?tidyr::pivot_longer

## Example 1

min_relig_income <- relig_income[1:3, 1:4]

\dontrun{
min_relig_income \%>\%
  pivot_longer(-religion, names_to = "income", values_to = "count")
}

min_relig_income \%tb>\%
  .[.stack = "<income>" ~ religion][{value} := "count"]

## Example 2

mini_billboard <- billboard[1:4, 1:7]

\dontrun{
mini_billboard \%>\%
  pivot_longer(
    cols = starts_with("wk"),
    names_to = "week",
    names_prefix = "wk",
    values_to = "rank",
    values_drop_na = TRUE
  )
}

mini_billboard \%tb>\%
  .[.stack = "wk<week>"][!is.na(value), {value} := "rank"]

## Example 3

\dontrun{
who \%>\%
  pivot_longer(
    cols = new_sp_m014:newrel_f65,
    names_to = c("diagnosis", "gender", "age"),
    names_pattern = "new_?(.*)_(.)(.*)",
    values_to = "count"
  )
}

who \%tb>\%
  .[.stack = "new<=_?><diagnosis>_<gender=.><age>"]$
  .[{value} := "count"]

## Example 4

\dontrun{
anscombe \%>\%
  pivot_longer(everything(),
               names_to = c(".value", "set"),
               names_pattern = "(.)(.)"
    )
}

anscombe \%tb>\%
  .[.stack= "<values_to=.><set>"]

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## examples from ?stats::reshape

## Example 1

mini_indometh <- data.frame(
  Subject   = c(1L, 3L, 6L),
  conc.0.25 = c(1.5, 2.03, 2.72),
  conc.0.5  = c(0.94, 1.63, 1.49),
  conc.0.75 = c(0.78, 0.71, 1.16))

\dontrun{
stats::reshape(mini_indometh, idvar = "Subject", varying = list(2:4),
               v.names = "conc", direction = "long")
}

mini_indometh \%tb>\%
  .[.stack = "<values_to>.<time>"]

## Example 2

doses <- data.frame(id = 1:4, age = c(40,50,60,50), dose1 = c(1,2,1,2),
                    dose2 = c(2,1,2,1), dose4 = c(3,3,3,3))

\dontrun{
  reshape(doses, direction = "long", varying = 3:5, sep = "")
}

doses \%tb>\%
  .[.stack = "<values_to><time=\\\\d>"]

## Example 3

mini_state.x77 <- as.data.frame(state.x77[1:3, 1:4])

\dontrun{
  reshape(mini_state.x77, idvar = "state", ids = row.names(mini_state.x77),
          times = names(mini_state.x77), timevar = "Characteristic",
          varying = list(names(mini_state.x77)), direction = "long")
}
mini_state.x77 \%tb>\%
  .[state = row.names(.data), .stack = "<Characteristic>" ~ state]

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## examples from ?reshape2::melt

mini_airquality <- airquality \%tb>\% .[Day \%in\% c(1,15) & Month \%in\% 5:7, 3:6]

\dontrun{
  melt(airquality_wide, id = c("Month", "Day"))
}

airquality_wide \%tb>\%
  .[.stack = ~ s(Month, Day)]

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## examples from ?tidyr::gather

# Example 1

stocks <- data.frame(
  time = as.Date('2009-01-01') + 0:2,
  X = rnorm(3, 0, 1),
  Y = rnorm(3, 0, 2),
  Z = rnorm(3, 0, 4)
)

\dontrun{
  stocks \%>\% gather("stock", "price", -time)
}

stocks \%tb>\%
  .[.stack = "<stock>" ~ time][{value} := "price"]

# Example 2

mini_iris <- iris[c(1, 51, 101), ]

\dontrun{
  gather(mini_iris, key = "flower_att", value = "measurement",
         Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
}

mini_iris \%tb>\%
  .[.stack = "<flower_att>" ~ s(-Sepal.Length, -Sepal.Width, -Petal.Length, -Petal.Width)]$
  .[{value} := "measurement"]

\dontrun{
  gather(mini_iris, key = "flower_att", value = "measurement", -Species)
}

mini_iris \%tb>\%
  .[.stack = "<flower_att>" ~ Species][{value} := "measurement"]

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## example from ?utils::stack

pg <- unstack(PlantGrowth)

\dontrun{
  stack(pg)
}

pg \%tb>\% .[.stack = s(?".*")]


}
